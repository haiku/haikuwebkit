/*
 * Copyright (C) 2025 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=WK_WEB_EXTENSIONS_BOOKMARKS,
    MainWorldOnly,
    ReturnsPromiseWhenCallbackIsOmitted,
] interface WebExtensionAPIBookmarks {
    [RaisesException, ImplementedAs=createBookmark] void create([NSDictionary] any bookmark, [Optional, CallbackHandler] function callback);
    
    [RaisesException] void getChildren(DOMString bookmarkIdentifier, [Optional, CallbackHandler] function callback);
    [RaisesException] void getRecent(long numberOfItems, [Optional, CallbackHandler] function callback);
    [RaisesException] void getSubTree(DOMString bookmarkIdentifier, [Optional, CallbackHandler] function callback);
    [RaisesException] void getTree([Optional, CallbackHandler] function callback);
    [RaisesException] void get([NSObject] any idOrIdList, [Optional, CallbackHandler] function callback);

    [RaisesException] void remove(DOMString bookmarkIdentifier, [Optional, CallbackHandler] function callback);
    [RaisesException] void removeTree(DOMString bookmarkIdentifier, [Optional, CallbackHandler] function callback);

    [RaisesException] void search([NSObject] any query, [Optional, CallbackHandler] function callback);
    [RaisesException] void update(DOMString bookmarkIdentifier, [NSDictionary] any changes, [Optional, CallbackHandler] function callback);
    [RaisesException] void move(DOMString bookmarkIdentifier, [NSDictionary] any destination, [Optional, CallbackHandler] function callback);
};
