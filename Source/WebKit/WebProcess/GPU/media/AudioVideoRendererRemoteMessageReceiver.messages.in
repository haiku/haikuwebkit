/*
 * Copyright (C) 2025 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#if ENABLE(GPU_PROCESS) && ENABLE(VIDEO)

[
    DispatchedFrom=GPU,
    DispatchedTo=WebContent
]
messages -> AudioVideoRendererRemoteMessageReceiver {
    RequestMediaDataWhenReady(WebCore::SamplesRendererTrackIdentifier identifier)
    FirstFrameAvailable(struct WebKit::RemoteAudioVideoRendererState state)
    HasAvailableVideoFrame(MediaTime time, double clockTime, struct WebKit::RemoteAudioVideoRendererState state)
    RequiresFlushToResume(struct WebKit::RemoteAudioVideoRendererState state)
    RenderingModeChanged(struct WebKit::RemoteAudioVideoRendererState state)
    SizeChanged(MediaTime time, WebCore::FloatSize size, struct WebKit::RemoteAudioVideoRendererState state)
    TrackNeedsReenqueuing(WebCore::SamplesRendererTrackIdentifier identifier, MediaTime time, struct WebKit::RemoteAudioVideoRendererState state)
    EffectiveRateChanged(struct WebKit::RemoteAudioVideoRendererState state)
    StallTimeReached(MediaTime time, struct WebKit::RemoteAudioVideoRendererState state)
    TaskTimeReached(MediaTime time, struct WebKit::RemoteAudioVideoRendererState state)
    ErrorOccurred(WebCore::PlatformMediaError error)
    StateUpdate(struct WebKit::RemoteAudioVideoRendererState state)

#if PLATFORM(COCOA)
    LayerHostingContextChanged(struct WebKit::RemoteAudioVideoRendererState state, struct WebCore::HostingContext hostingContext, WebCore::FloatSize presentationSize);
#endif
}

#endif
