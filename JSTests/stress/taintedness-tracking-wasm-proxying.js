//@ requireOptions("--forceDiskCache=0")
//@ requireOptions("--jitMemoryReservationSize=268435456")

let verbose = false;

function log(msg) {
    if (verbose) {
        print(msg);
    }
}

function check(expected, state = $vm.vmTaintedState()) {
    if (expected != state)
        throw new Error("Expected " + expected + " but state was " + state);
}

function checkNot(expected, state = $vm.vmTaintedState()) {
    if (expected == state)
        throw new Error("Expected to not be " + expected);
}

function shouldBeUntainted() {
    if (verbose) {
        print("Ran shouldBeUntainted");
    }
    check("Untainted");
}

function shouldBeTainted() {
    if (verbose) {
        print("Ran shouldBeTainted");
    }
    checkNot("Untainted");
}

shouldBeUntainted();

$vm.runTaintedString(`
let reexporter = new Uint8Array([
    0x00,0x61,0x73,0x6d,0x01,0x00,0x00,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x00,0x02,0x87,0x80,0x80,0x80,0x00,0x01,0x01,0x69,0x01,0x66,0x00,0x00,0x07,0x85,0x80,0x80,0x80,0x00,0x01,0x01,0x66,0x00,0x00,
]);
let proxier = new Uint8Array([
    0x00,0x61,0x73,0x6d,0x01,0x00,0x00,0x00,0x01,0x89,0x80,0x80,0x80,0x00,0x02,0x60,0x00,0x00,0x60,0x01,0x63,0x00,0x00,0x02,0x87,0x80,0x80,0x80,0x00,0x01,0x01,0x69,0x01,0x66,0x00,0x00,0x03,0x84,0x80,0x80,0x80,0x00,0x03,0x01,0x00,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x01,0x06,0x86,0x80,0x80,0x80,0x00,0x01,0x70,0x01,0xd0,0x70,0x0b,0x07,0xc4,0x80,0x80,0x80,0x00,0x05,0x06,0x76,0x74,0x61,0x62,0x6c,0x65,0x01,0x00,0x0b,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x66,0x75,0x6e,0x63,0x03,0x00,0x0c,0x70,0x72,0x6f,0x78,0x79,0x5f,0x73,0x69,0x6d,0x70,0x6c,0x65,0x00,0x01,0x0c,0x70,0x72,0x6f,0x78,0x79,0x5f,0x69,0x6d,0x70,0x6f,0x72,0x74,0x00,0x02,0x0b,0x70,0x72,0x6f,0x78,0x79,0x5f,0x74,0x61,0x62,0x6c,0x65,0x00,0x03,0x0a,0xa1,0x80,0x80,0x80,0x00,0x03,0x86,0x80,0x80,0x80,0x00,0x00,0x20,0x00,0x14,0x00,0x0b,0x84,0x80,0x80,0x80,0x00,0x00,0x10,0x00,0x0b,0x87,0x80,0x80,0x80,0x00,0x00,0x41,0x00,0x11,0x00,0x00,0x0b,
]);
let startup = new Uint8Array([
    0x00,0x61,0x73,0x6d,0x01,0x00,0x00,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x00,0x02,0x87,0x80,0x80,0x80,0x00,0x01,0x01,0x69,0x01,0x66,0x00,0x00,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x07,0x90,0x80,0x80,0x80,0x00,0x01,0x0c,0x70,0x72,0x6f,0x78,0x79,0x5f,0x69,0x6d,0x70,0x6f,0x72,0x74,0x00,0x01,0x08,0x81,0x80,0x80,0x80,0x00,0x01,0x0a,0x8a,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x10,0x00,0x0b,
]);

let targetFunction = ($vm.vmTaintedState() == "Untainted") ? shouldBeUntainted : shouldBeTainted;
let reexporterModule = new WebAssembly.Module(reexporter);
let proxierModule = new WebAssembly.Module(proxier);
let startupModule = new WebAssembly.Module(startup);

{
    // Simple stuff
    let proxierInstance = new WebAssembly.Instance(proxierModule, {"i": {
        "f": targetFunction
    }});

    log("Testing proxying via import");
    proxierInstance.exports.proxy_import;
    setTimeout(proxierInstance.exports.proxy_import, 0);

    log("Testing proxying via exported wasm wrapper");
    proxierInstance.exports.proxy_simple(proxierInstance.exports.proxy_import);

    log("Testing proxying via table");
    let tbl0 = proxierInstance.exports.vtable;
    tbl0.set(0, proxierInstance.exports.proxy_import);
    proxierInstance.exports.proxy_table();
    setTimeout(proxierInstance.exports.proxy_table, 0);

    log("Test proxying via global");
    proxierInstance.exports.global_func.value = proxierInstance.exports.proxy_import;
    proxierInstance.exports.global_func.value();
    setTimeout(proxierInstance.exports.global_func.value, 0);

    let reexporterModule0 = new WebAssembly.Instance(reexporterModule, {"i": {
        "f": targetFunction
    }});

    log("Testing proxying via reexport, then bind");
    reexporterModule0.exports.f();
    setTimeout(reexporterModule0.exports.f.bind(), 3);

    let proxyViaReexportInstance = new WebAssembly.Instance(proxierModule, {"i": {
        "f": reexporterModule0.exports.f
    }});

    log("Testing proxying via reexport, then import");
    proxyViaReexportInstance.exports.proxy_import();
    setTimeout(proxyViaReexportInstance.exports.proxy_import, 0);

    log("Testing proxying via reexport, then exported wasm wrapper");
    proxyViaReexportInstance.exports.proxy_simple(reexporterModule0.exports.f);
    proxyViaReexportInstance.exports.proxy_simple(proxierInstance.exports.proxy_import);
    proxyViaReexportInstance.exports.proxy_simple(proxyViaReexportInstance.exports.proxy_import);

    log("Testing proxying via reexport, then table");
    let tbl1 = proxyViaReexportInstance.exports.vtable;
    tbl1.set(0, reexporterModule0.exports.f);
    proxyViaReexportInstance.exports.proxy_table();
    setTimeout(proxyViaReexportInstance.exports.proxy_table, 0);

    log("Testing proxying via startup function");
    let startupInstance = new WebAssembly.Instance(startupModule, {"i": {
        "f": targetFunction
    }});
}

{
    // Trickier case where we bind instantiate

    log("Testing proxying via binding instantiate with a startup function");
    let boundCompile = WebAssembly.instantiate.bind(startupModule, {"i": {
        "f": targetFunction
    }});
    setTimeout(boundCompile, 0);
}

`);



